import random
class Person:
    def __init__(self):
        self.job = ["Педиатр", "Фитнес тренер", "Полицейский", "Физик-ядерщик", "Биолог", "Химик", "Философ", "Блогер",
                    "Диетолог", "Психолог", "Сексолог", "Строитель", "Учитель", "Военний", "Пилот", "Художник",
                    "Татуировщик", "Президент", "Повар", "Бурильщик", "Хакер", "Бариста", "Акушер", "БиоХимик",
                    "Кондитер", "Хирург", "Инжирен", "Инструктор по выживанию", "Бугалтер", "Ландшафтный дизайнер",
                    "Животновод", "Режисер", "Порноактер", "Ветеринар", "Матрос", "Водитель", "Космонавт", "Пожарник",
                    "Судья", "Имунолог", "Вирусолог"]
        self.hobby = ["Животноводство", "Парусний спорт", "Рибалка", "Бадминон", "Кепминг", "Футбол",
                      "Реставрация поверхностей", "Готовка", "Астрономия", "Радиосвязь", "Оригами", "Стенд ап"]
        self.age = persentage("Возрозст = ", 18, 90)/10

        # ///////bio////////    #
        if random.randint(0, 2) == 0:
            self.biological = "Мужчина"
        else:
            self.biological = "Женщина"

        if random.randint(0, 11) > 7:
            self.childFree = "childFree"
        else:
            self.childFree = "NeChildFree"
        self.dopInfo = ["Знал президента", "Переспал(ла) с порнозвездой", "Проходил курси психолога",
                        "Проходил курси сексолога", "Воевал в Сирии", "Обокрал деда", "Обокрал банк", "Получил красный"
                        "диплом в 15 лет", "Могу оказать первую мед помощ", "Перечитал все книги о властелине колец"]
        self.humanTrait = ["Параноик", "Зануда", "Конфликтный", "Настойчивый", "Жизнерадосний", "Скучний", "Понимающий",
                           "ЧСВ", "Чудесен", "Нимфоманка", "Пацифист"]
        self.health = ["Безплоден", "Потерял левую руку", "Слепота", "Совершенно здоров", "Псориаз", "Туберкульоз",
                       "Биполярка", "Альц Геймер", "Парализован ниже пояса", "Отсутствие обояния", "Сахарный диабет",
                       "Алергия", "Астма", "Алкоголизм", "Тремор", "Дальтонизм"]
        self.phobia = ["Арахнофобия", "Без фобий", "Клаустрофобия", "Ортофобия(боязнь птиц и их перьев)", "Кинофобия",
                       "Фобофобия(боязнь чужих фобий)", "Боязнь демонов", "Боязнь числа 4", "Боязнь призраков",
                       "Боязнь шерсти", "Боязнь темноты", "Боязнь высоты", "Боязнь быть одному"]

        print(len(self.job))

Person()
class Body:
    def __init__(self):
        self.height = random.randint(150, 200)
        self.weight = random.randint(40, 150)
        IMT = self.weight/(self.height*self.height/100)
        

class Catastrophe:
    def __init__(self):
        self.catastropheName = ["Падение метеорита", "Всемирный потоп", "Зомби-апокалипсис", "Востание машин",
                                "Ядерная война", "Химическая война", "Ядерная зима", "Нападения демонов",
                                "Колонизация марса", "Планета захвачена приматами", "Извержение вулканов", "Епидемия",
                                "Епидемия мозговых червей", "Вспышки на солнце", "Гражданская война"]
        print("Catastrophes :" + str(len(self.catastropheName)))

        self.description = {"Падение метеорита": persentage("Ученые не смогли предотвратить падение метеорита"
                            ", инфраструктура нарушена, небольшой процент населения успел спрятаться в бункери "
                                                                 "разрушения местности - ", 4, 8)+""+"Наблюдаються"
                            "проблеми с очисткой почвы и ее плодородностю, продолжением рода и обеспечением пищи после "
                            "выхода из бункера и позобновлением инфраструктури",
                            # ////////////////////////////// Новий сценарій////////////////////////////////////////// #
                            "Всемирный потоп": persentage("В последствие глобального потепления вся планета "
                                                               "покрыта водой, процент суши - ", 0.6, 2)+"Наблюдаються"
                            "проблеми с очисткой воды, продолжением рода и обеспечением пищи после выхода из бункера",
                            # ////////////////////////////// Новий сценарій////////////////////////////////////////// #
                            "Зомби-апокалипсис": persentage("Богатая корпорация не удержала испытания вируса под"
                                                                 "контролем и породила зомби епидемию, розрушения - "
                                                                 "", 5, 9)+"Люди после выхода нуждаються в самозащите, "
                            "продолжением рода и обеспечением себя пищей. ",
                            # ////////////////////////////// Новий сценарій////////////////////////////////////////// #
                            "Востание машин": persentage("Скайнет вышел из под контроля и роботы смогли отключить "
                                                              "первое правило робототехники - не навреди человеку, "
                                                              "глобальные розрушения -  ", 6, 9) + "Люди после выхода"
                            "сильно нуждаются в защите человечества, обеспечении еди, продолжения рода, и возвращение"
                            " земли",
                            # ////////////////////////////// Новий сценарій////////////////////////////////////////// #
                            "Ядерная война": persentage("", 6, 9) + "Люди после выхода"
                            "сильно нуждаются в защите человечества, обеспечении еди, продолжения рода, и возвращение"
                            " земли",
                            }



        print(self.description)

def persentage( text, start, finish):
    return text + str(random.randint(start, finish)*10)



Catastrophe()